<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComplexDataStructure" xml:space="preserve">
    <value>The object to serialize contains a complex data structure which can not be serialized.</value>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>Multiple fields/properties have been assigned the name '{0}' using the PlainTextElement attribute.</value>
    <comment>One of the names of the duplicate fields as argument</comment>
  </data>
  <data name="HeaderFormat" xml:space="preserve">
    <value>The header that was read had an incorrect format.</value>
  </data>
  <data name="InvalidObjectString" xml:space="preserve">
    <value>The object string '{0}' could not be converted to the type '{1}'.</value>
    <comment>Param 0  : The object string that could not be converted.
Param 1 : Type that the object was attempted to be converted to.</comment>
  </data>
  <data name="InvalidSerializationType" xml:space="preserve">
    <value>The given object is not a class type. Only classes with fields/properties can be serialized.</value>
  </data>
  <data name="InvalidSettingFormat" xml:space="preserve">
    <value>The property on line '{0}' has an incorrect format.</value>
    <comment>The line containing the faulty property.</comment>
  </data>
  <data name="NameContainedComment" xml:space="preserve">
    <value>The name of the field/property can not contain any comments.</value>
  </data>
  <data name="NoPublicSetter" xml:space="preserve">
    <value>The property '{0}' can not be serialized because it does not have a public setter.</value>
    <comment>Property name that can't be serialized as argument</comment>
  </data>
  <data name="PropertyMissingSeparator" xml:space="preserve">
    <value>The property could not be read as it did not contain the property separator : '{0}'.</value>
    <comment>Property separator as parameter.</comment>
  </data>
  <data name="PropertyNameEmpty" xml:space="preserve">
    <value>The property could not be deserialized as its name was not specified.</value>
  </data>
  <data name="PropertyValueEmpty" xml:space="preserve">
    <value>The property with the name '{0}' could not be deserialized as it did not have its value specified.</value>
    <comment>Property name as parameter.</comment>
  </data>
  <data name="TypeCouldNotBeDecoded" xml:space="preserve">
    <value>The type '{0}' could not be decoded by the decoder.</value>
    <comment>Type that can't be decoded as parameter.</comment>
  </data>
  <data name="TypeHasNoParameterlessConstructor" xml:space="preserve">
    <value>The type '{0}' can not be serialized because it has no parameterless constructor.</value>
    <comment>Type that can't be serialized as parameter.</comment>
  </data>
  <data name="TypeNotAccessible" xml:space="preserve">
    <value>The type '{0}' can not be serialized because it is not public.</value>
    <comment>Type that can't be serialized as parameter.</comment>
  </data>
</root>